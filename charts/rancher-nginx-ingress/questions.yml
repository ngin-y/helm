# ***REMOVE THIS WHEN DONE***
# https://rancher.com/docs/rancher/v2.x/en/catalog/creating-apps/

categories:
- Ingress
- Proxy
- Loadbalancer
labels:
  io.cattle.role: project
  io.rancher.certified: partner
questions:
- variable: imageDefault
  default: true
  description: "Use default Docker image"
  label: Use Default Image
  type: boolean
  group: "Settings"
  show_subquestion_if: false
  subquestions:
  - variable: controller.image.tag
    default: edge
    description: "NGINX Ingress Controller Tag"
    type: string
    label: NGINX Ingress Controller Tag
- variable: controller.kind
  type: enum
  options:
    - deployment
    - daemonset
  default: deployment
  description: "The kind of the Ingress controller installation - deployment or daemonset."
  label: Installation Kind
  group: "Settings"
# - variable: controller.defaultTLS.cert
#   default: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN2akNDQWFZQ0NRREFPRjl0THNhWFhEQU5CZ2txaGtpRzl3MEJBUXNGQURBaE1SOHdIUVlEVlFRRERCWk8KUjBsT1dFbHVaM0psYzNORGIyNTBjbTlzYkdWeU1CNFhEVEU0TURreE1qRTRNRE16TlZvWERUSXpNRGt4TVRFNApNRE16TlZvd0lURWZNQjBHQTFVRUF3d1dUa2RKVGxoSmJtZHlaWE56UTI5dWRISnZiR3hsY2pDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUwvN2hIUEtFWGRMdjNyaUM3QlBrMTNpWkt5eTlyQ08KR2xZUXYyK2EzUDF0azIrS3YwVGF5aGRCbDRrcnNUcTZzZm8vWUk1Y2Vhbkw4WGM3U1pyQkVRYm9EN2REbWs1Qgo4eDZLS2xHWU5IWlg0Rm5UZ0VPaStlM2ptTFFxRlBSY1kzVnNPazFFeUZBL0JnWlJVbkNHZUtGeERSN0tQdGhyCmtqSXVuektURXUyaDU4Tlp0S21ScUJHdDEwcTNRYzhZT3ExM2FnbmovUWRjc0ZYYTJnMjB1K1lYZDdoZ3krZksKWk4vVUkxQUQ0YzZyM1lma1ZWUmVHd1lxQVp1WXN2V0RKbW1GNWRwdEMzN011cDBPRUxVTExSakZJOTZXNXIwSAo1TmdPc25NWFJNV1hYVlpiNWRxT3R0SmRtS3FhZ25TZ1JQQVpQN2MwQjFQU2FqYzZjNGZRVXpNQ0F3RUFBVEFOCkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWpLb2tRdGRPcEsrTzhibWVPc3lySmdJSXJycVFVY2ZOUitjb0hZVUoKdGhrYnhITFMzR3VBTWI5dm15VExPY2xxeC9aYzJPblEwMEJCLzlTb0swcitFZ1U2UlVrRWtWcitTTFA3NTdUWgozZWI4dmdPdEduMS9ienM3bzNBaS9kclkrcUI5Q2k1S3lPc3FHTG1US2xFaUtOYkcyR1ZyTWxjS0ZYQU80YTY3Cklnc1hzYktNbTQwV1U3cG9mcGltU1ZmaXFSdkV5YmN3N0NYODF6cFErUyt1eHRYK2VBZ3V0NHh3VlI5d2IyVXYKelhuZk9HbWhWNThDd1dIQnNKa0kxNXhaa2VUWXdSN0diaEFMSkZUUkk3dkhvQXprTWIzbjAxQjQyWjNrN3RXNQpJUDFmTlpIOFUvOWxiUHNoT21FRFZkdjF5ZytVRVJxbStGSis2R0oxeFJGcGZnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
#   description: "The base64-encoded TLS certificate for the default HTTPS server. If not specified, a pre-generated self-signed certificate is used. **Note:** It is recommended that you specify your own certificate."
#   label: TLS Cert
#   type: string
#   group: "Settings"
# - variable: controller.defaultTLS.key
#   default: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdi91RWM4b1JkMHUvZXVJTHNFK1RYZUprckxMMnNJNGFWaEMvYjVyYy9XMlRiNHEvClJOcktGMEdYaVN1eE9ycXgrajlnamx4NXFjdnhkenRKbXNFUkJ1Z1B0ME9hVGtIekhvb3FVWmcwZGxmZ1dkT0EKUTZMNTdlT1l0Q29VOUZ4amRXdzZUVVRJVUQ4R0JsRlNjSVo0b1hFTkhzbysyR3VTTWk2Zk1wTVM3YUhudzFtMApxWkdvRWEzWFNyZEJ6eGc2clhkcUNlUDlCMXl3VmRyYURiUzc1aGQzdUdETDU4cGszOVFqVUFQaHpxdmRoK1JWClZGNGJCaW9CbTVpeTlZTW1hWVhsMm0wTGZzeTZuUTRRdFFzdEdNVWozcGJtdlFmazJBNnljeGRFeFpkZFZsdmwKMm82MjBsMllxcHFDZEtCRThCay90elFIVTlKcU56cHpoOUJUTXdJREFRQUJBb0lCQVFDZklHbXowOHhRVmorNwpLZnZJUXQwQ0YzR2MxNld6eDhVNml4MHg4Mm15d1kxUUNlL3BzWE9LZlRxT1h1SENyUlp5TnUvZ2IvUUQ4bUFOCmxOMjRZTWl0TWRJODg5TEZoTkp3QU5OODJDeTczckM5bzVvUDlkazAvYzRIbjAzSkVYNzZ5QjgzQm9rR1FvYksKMjhMNk0rdHUzUmFqNjd6Vmc2d2szaEhrU0pXSzBwV1YrSjdrUkRWYmhDYUZhNk5nMUZNRWxhTlozVDhhUUtyQgpDUDNDeEFTdjYxWTk5TEI4KzNXWVFIK3NYaTVGM01pYVNBZ1BkQUk3WEh1dXFET1lvMU5PL0JoSGt1aVg2QnRtCnorNTZud2pZMy8yUytSRmNBc3JMTnIwMDJZZi9oY0IraVlDNzVWYmcydVd6WTY3TWdOTGQ5VW9RU3BDRkYrVm4KM0cyUnhybnhBb0dCQU40U3M0ZVlPU2huMVpQQjdhTUZsY0k2RHR2S2ErTGZTTXFyY2pOZjJlSEpZNnhubmxKdgpGenpGL2RiVWVTbWxSekR0WkdlcXZXaHFISy9iTjIyeWJhOU1WMDlRQ0JFTk5jNmtWajJTVHpUWkJVbEx4QzYrCk93Z0wyZHhKendWelU0VC84ajdHalRUN05BZVpFS2FvRHFyRG5BYWkyaW5oZU1JVWZHRXFGKzJyQW9HQkFOMVAKK0tZL0lsS3RWRzRKSklQNzBjUis3RmpyeXJpY05iWCtQVzUvOXFHaWxnY2grZ3l4b25BWlBpd2NpeDN3QVpGdwpaZC96ZFB2aTBkWEppc1BSZjRMazg5b2pCUmpiRmRmc2l5UmJYbyt3TFU4NUhRU2NGMnN5aUFPaTVBRHdVU0FkCm45YWFweUNweEFkREtERHdObit3ZFhtaTZ0OHRpSFRkK3RoVDhkaVpBb0dCQUt6Wis1bG9OOTBtYlF4VVh5YUwKMjFSUm9tMGJjcndsTmVCaWNFSmlzaEhYa2xpSVVxZ3hSZklNM2hhUVRUcklKZENFaHFsV01aV0xPb2I2NTNyZgo3aFlMSXM1ZUtka3o0aFRVdnpldm9TMHVXcm9CV2xOVHlGanIrSWhKZnZUc0hpOGdsU3FkbXgySkJhZUFVWUNXCndNdlQ4NmNLclNyNkQrZG8wS05FZzFsL0FvR0FlMkFVdHVFbFNqLzBmRzgrV3hHc1RFV1JqclRNUzRSUjhRWXQKeXdjdFA4aDZxTGxKUTRCWGxQU05rMXZLTmtOUkxIb2pZT2pCQTViYjhibXNVU1BlV09NNENoaFJ4QnlHbmR2eAphYkJDRkFwY0IvbEg4d1R0alVZYlN5T294ZGt5OEp0ek90ajJhS0FiZHd6NlArWDZDODhjZmxYVFo5MWpYL3RMCjF3TmRKS2tDZ1lCbyt0UzB5TzJ2SWFmK2UwSkN5TGhzVDQ5cTN3Zis2QWVqWGx2WDJ1VnRYejN5QTZnbXo5aCsKcDNlK2JMRUxwb3B0WFhNdUFRR0xhUkcrYlNNcjR5dERYbE5ZSndUeThXczNKY3dlSTdqZVp2b0ZpbmNvVlVIMwphdmxoTUVCRGYxSjltSDB5cDBwWUNaS2ROdHNvZEZtQktzVEtQMjJhTmtsVVhCS3gyZzR6cFE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
#   description: "The base64-encoded TLS key for the default HTTPS server. **Note:** If not specified, a pre-generated key is used. It is recommended that you specify your own key."
#   label: TLS Key
#   type: string
#   group: "Settings"
- variable: controller.defaultTLS.secret
  default: ""
  description: "The secret with a TLS certificate and key for the default HTTPS server. The value must follow the following format: `<namespace>/<name>`. Used as an alternative to specifying a certificate and key using `controller.defaultTLS.cert` and `controller.defaultTLS.key` parameters."
  label: TLS Secret
  type: string
  group: "Settings"
# - variable: controller.replicaCount
#   default: 1
#   description: "The number of replicas of the Ingress controller deployment."
#   label: Pod Replicas
#   type: int
#   group: "Advanced Settings"  
- variable: controller.nginxplus
  default: false
  description: "Deploys the Ingress controller for NGINX Plus."
  label: Deploy NGINX Plus
  type: boolean
  group: "NGINX Plus"
  show_subquestion_if: true
  subquestions:
  - variable: controller.image.repository
    type: string
    default: "myregistry.example.com/nginx-plus-ingress"
    description: "Your Private Container Registry"
    label: Repository


# ------------------    
# ***Demo Example***
# ------------------   
# # `controller.replicaCount` | The number of replicas of the Ingress controller deployment. | 1
# - variable: controller.replicaCount
#   default: 1
#   description: "The number of replicas of the Ingress controller deployment."
#   label: insert Label
#   type: int
#   group: "Insert Group Title"


# ***REMOVE THIS WHEN DONE***
# ---------------------------------------
# Full List of available NGINX Parameters
# ---------------------------------------
#
# # `controller.name` | The name of the Ingress controller daemonset or deployment. | Autogenerated
# - variable: controller.name
#   default: Autogenerated
#   description: "The name of the Ingress controller daemonset or deployment."
#   label: insert Label
#   type: string
#   group: "Insert Group Title"

# # `controller.kind` | The kind of the Ingress controller installation - deployment or daemonset. | deployment
# - variable: controller.kind
#   default: deployment
#   description: "The kind of the Ingress controller installation - deployment or daemonset."
#   label: insert Label
#   type: enum
#   group: "Insert Group Title"

# # `controller.nginxplus` | Deploys the Ingress controller for NGINX Plus. | false
# - variable: controller.nginxplus
#   default: false
#   description: "Deploys the Ingress controller for NGINX Plus."
#   label: insert Label
#   type: boolean
#   group: "Insert Group Title"

# # `controller.hostNetwork` | Enables the Ingress controller pods to use the host's network namespace. | false
# - variable: controller.hostNetwork
#   default: false
#   description: "Enables the Ingress controller pods to use the host's network namespace."
#   label: insert Label
#   type: boolean
#   group: "Insert Group Title"

# # `controller.nginxDebug` | Enables debugging for NGINX. Uses the `nginx-debug` binary. Requires `error-log-level: debug` in the ConfigMap via `controller.config.entries`. | false
# - variable: controller.nginxDebug
#   default: false
#   description: "Enables debugging for NGINX. Uses the `nginx-debug` binary. Requires `error-log-level: debug` in the ConfigMap via `controller.config.entries`."
#   label: insert Label
#   type: boolean
#   group: "Insert Group Title"

# # `controller.logLevel` | The log level of the Ingress Controller. | 1
# - variable: controller.logLevel
#   default: 1
#   description: "The log level of the Ingress Controller."
#   label: insert Label
#   type: int
#   group: "Insert Group Title"

# # `controller.image.repository` | The image repository of the Ingress controller. | nginx/nginx-ingress
# - variable: controller.image.repository
#   default: nginx/nginx-ingress
#   description: "The image repository of the Ingress controller."
#   label: insert Label
#   type: string
#   group: "Insert Group Title"

# # `controller.image.tag` | The tag of the Ingress controller image. | edge
# - variable: controller.image.tag
#   default: edge
#   description: "The tag of the Ingress controller image."
#   label: insert Label
#   type: string
#   group: "Insert Group Title"

# # `controller.image.pullPolicy` | The pull policy for the Ingress controller image. | IfNotPresent
# - variable: controller.image.pullPolicy
#   default: IfNotPresent
#   description: "The pull policy for the Ingress controller image."
#   label: insert Label
#   type: string
#   group: "Insert Group Title"

# # `controller.config.name` | The name of the ConfigMap used by the Ingress controller. | Autogenerated
# - variable: controller.config.name
#   default: Autogenerated
#   description: "The name of the ConfigMap used by the Ingress controller."
#   label: insert Label
#   type: string
#   group: "Insert Group Title"

# # `controller.config.entries` | The entries of the ConfigMap for customizing NGINX configuration. | {}
# - variable: controller.config.entries
#   default: {}
#   description: "The entries of the ConfigMap for customizing NGINX configuration."
#   label: insert Label
#   type: Insert one of the following - string multiline boolean int enum password storageclass hostname pvc secret
#   group: "Insert Group Title"

# # `controller.customPorts` | A list of custom ports to expose on the NGINX ingress controller pod. Follows the conventional Kubernetes yaml syntax for container ports. | []
# - variable: controller.customPorts
#   default: []
#   description: "A list of custom ports to expose on the NGINX ingress controller pod. Follows the conventional Kubernetes yaml syntax for container ports."
#   label: insert Label
#   type: Insert one of the following - string multiline boolean int enum password storageclass hostname pvc secret
#   group: "Insert Group Title"

# # `controller.defaultTLS.cert` | The base64-encoded TLS certificate for the default HTTPS server. If not specified, a pre-generated self-signed certificate is used. **Note:** It is recommended that you specify your own certificate. | A pre-generated self-signed certificate.
# - variable: controller.defaultTLS.cert
#   default: A pre-generated self-signed certificate.
#   description: "The base64-encoded TLS certificate for the default HTTPS server. If not specified, a pre-generated self-signed certificate is used. **Note:** It is recommended that you specify your own certificate."
#   label: insert Label
#   type: Insert one of the following - string secret
#   group: "Insert Group Title"

# # `controller.defaultTLS.key` | The base64-encoded TLS key for the default HTTPS server. **Note:** If not specified, a pre-generated key is used. It is recommended that you specify your own key. | A pre-generated key.
# - variable: controller.defaultTLS.key
#   default: A pre-generated key.
#   description: "The base64-encoded TLS key for the default HTTPS server. **Note:** If not specified, a pre-generated key is used. It is recommended that you specify your own key."
#   label: insert Label
#   type: Insert one of the following - string secret
#   group: "Insert Group Title"

# # `controller.defaultTLS.secret` | The secret with a TLS certificate and key for the default HTTPS server. The value must follow the following format: `<namespace>/<name>`. Used as an alternative to specifying a certificate and key using `controller.defaultTLS.cert` and `controller.defaultTLS.key` parameters. | None
# - variable: controller.defaultTLS.secret
#   default: none
#   description: "The secret with a TLS certificate and key for the default HTTPS server. The value must follow the following format: `<namespace>/<name>`. Used as an alternative to specifying a certificate and key using `controller.defaultTLS.cert` and `controller.defaultTLS.key` parameters."
#   label: insert Label
#   type: secret
#   group: "Insert Group Title"

# # `controller.wildcardTLS.cert` | The base64-encoded TLS certificate for every Ingress host that has TLS enabled but no secret specified. If the parameter is not set, for such Ingress hosts NGINX will break any attempt to establish a TLS connection. | None
# - variable: controller.wildcardTLS.cert
#   default: none
#   description: "The base64-encoded TLS certificate for every Ingress host that has TLS enabled but no secret specified. If the parameter is not set, for such Ingress hosts NGINX will break any attempt to establish a TLS connection."
#   label: insert Label
#   type: Insert one of the following - string secret
#   group: "Insert Group Title"

# # `controller.wildcardTLS.key` | The base64-encoded TLS key for every Ingress host that has TLS enabled but no secret specified. If the parameter is not set, for such Ingress hosts NGINX will break any attempt to establish a TLS connection. | None
# - variable: controller.wildcardTLS.key
#   default: none
#   description: "The base64-encoded TLS key for every Ingress host that has TLS enabled but no secret specified. If the parameter is not set, for such Ingress hosts NGINX will break any attempt to establish a TLS connection."
#   label: insert Label
#   type: Insert one of the following - string secret
#   group: "Insert Group Title"

# # `controller.wildcardTLS.secret` | The secret with a TLS certificate and key for every Ingress host that has TLS enabled but no secret specified. The value must follow the following format: `<namespace>/<name>`. Used as an alternative to specifying a certificate and key using `controller.wildcardTLS.cert` and `controller.wildcardTLS.key` parameters. | None
# - variable: controller.wildcardTLS.secret
#   default: none
#   description: "The secret with a TLS certificate and key for every Ingress host that has TLS enabled but no secret specified. The value must follow the following format: `<namespace>/<name>`. Used as an alternative to specifying a certificate and key using `controller.wildcardTLS.cert` and `controller.wildcardTLS.key` parameters."
#   label: insert Label
#   type: Insert one of the following - string secret
#   group: "Insert Group Title"

# # `controller.nodeSelector` | The node selector for pod assignment for the Ingress controller pods. | {}
# - variable: controller.nodeSelector
#   default: {}
#   description: "The node selector for pod assignment for the Ingress controller pods."
#   label: insert Label
#   type: Insert one of the following - string multiline boolean int enum password storageclass hostname pvc secret
#   group: "Insert Group Title"

# # `controller.terminationGracePeriodSeconds` | The termination grace period of the Ingress controller pod. | 30
# - variable: controller.terminationGracePeriodSeconds
#   default: 30
#   description: "The termination grace period of the Ingress controller pod."
#   label: insert Label
#   type: int
#   group: "Insert Group Title"

# # `controller.tolerations` | The tolerations of the Ingress controller pods. | []
# - variable: controller.tolerations
#   default: []
#   description: "The tolerations of the Ingress controller pods."
#   label: insert Label
#   type: Insert one of the following - string multiline boolean int enum password storageclass hostname pvc secret
#   group: "Insert Group Title"

# # `controller.affinity` | The affinity of the Ingress controller pods. | {}
# - variable: controller.affinity
#   default: {}
#   description: "The affinity of the Ingress controller pods."
#   label: insert Label
#   type: Insert one of the following - string multiline boolean int enum password storageclass hostname pvc secret
#   group: "Insert Group Title"

# # `controller.volumes` | The volumes of the Ingress controller pods. | []
# - variable: controller.volumes
#   default: []
#   description: "The volumes of the Ingress controller pods."
#   label: insert Label
#   type: Insert one of the following - string multiline boolean int enum password storageclass hostname pvc secret
#   group: "Insert Group Title"

# # `controller.volumeMounts` | The volumeMounts of the Ingress controller pods. | []
# - variable: controller.volumeMounts
#   default: []
#   description: "The volumeMounts of the Ingress controller pods."
#   label: insert Label
#   type: Insert one of the following - string multiline boolean int enum password storageclass hostname pvc secret
#   group: "Insert Group Title"

# # `controller.resources` | The resources of the Ingress controller pods. | {}
# - variable: controller.resources
#   default: {}
#   description: "The resources of the Ingress controller pods."
#   label: insert Label
#   type: Insert one of the following - string multiline boolean int enum password storageclass hostname pvc secret
#   group: "Insert Group Title"

# # `controller.replicaCount` | The number of replicas of the Ingress controller deployment. | 1
# - variable: controller.replicaCount
#   default: 1
#   description: "The number of replicas of the Ingress controller deployment."
#   label: insert Label
#   type: int
#   group: "Insert Group Title"

# # `controller.ingressClass` | A class of the Ingress controller. The Ingress controller only processes Ingress resources that belong to its class - i.e. have the annotation `"kubernetes.io/ingress.class"` equal to the class. Additionally, the Ingress controller processes Ingress resources that do not have that annotation which can be disabled by setting the "-use-ingress-class-only" flag. | nginx
# - variable: controller.ingressClass
#   default: nginx
#   description: "A class of the Ingress controller. The Ingress controller only processes Ingress resources that belong to its class - i.e. have the annotation `[kubernetes.io/ingress.class]` equal to the class. Additionally, the Ingress controller processes Ingress resources that do not have that annotation which can be disabled by setting the [-use-ingress-class-only] flag."
#   label: insert Label
#   type: string
#   group: "Insert Group Title"

# # `controller.useIngressClassOnly` | Ignore Ingress resources without the `"kubernetes.io/ingress.class"` annotation. | false
# - variable: controller.useIngressClassOnly
#   default: false
#   description: "Ignore Ingress resources without the `[kubernetes.io/ingress.class]` annotation."
#   label: insert Label
#   type: boolean
#   group: "Insert Group Title"

# # `controller.watchNamespace` | Namespace to watch for Ingress resources. By default the Ingress controller watches all namespaces. | ""
# - variable: controller.watchNamespace
#   default: ""
#   description: "Namespace to watch for Ingress resources. By default the Ingress controller watches all namespaces."
#   label: insert Label
#   type: string
#   group: "Insert Group Title"

# # `controller.enableCustomResources` | Enable the custom resources. | true
# - variable: controller.enableCustomResources
#   default: true
#   description: "Enable the custom resources."
#   label: insert Label
#   type: boolean
#   group: "Insert Group Title"

# # `controller.enableTLSPassthrough` | Enable TLS Passthrough on port 443. Requires `controller.enableCustomResources`. | false
# - variable: controller.enableTLSPassthrough
#   default: false
#   description: "Enable TLS Passthrough on port 443. Requires `controller.enableCustomResources`."
#   label: insert Label
#   type: boolean
#   group: "Insert Group Title"

# # `controller.healthStatus` | Add a location "/nginx-health" to the default server. The location responds with the 200 status code for any request. Useful for external health-checking of the Ingress controller. | false
# - variable: controller.healthStatus
#   default: false
#   description: "Add a location [/nginx-health] to the default server. The location responds with the 200 status code for any request. Useful for external health-checking of the Ingress controller."
#   label: insert Label
#   type: boolean
#   group: "Insert Group Title"

# # `controller.healthStatusURI` | Sets the URI of health status location in the default server. Requires `contoller.healthStatus`. | "/nginx-health"
# - variable: controller.healthStatusURI
#   default: /nginx-health
#   description: "Sets the URI of health status location in the default server. Requires `contoller.healthStatus`."
#   label: insert Label
#   type: string
#   group: "Insert Group Title"

# # `controller.nginxStatus.enable` | Enable the NGINX stub_status, or the NGINX Plus API. | true
# - variable: controller.nginxStatus.enable
#   default: true
#   description: "Enable the NGINX stub_status, or the NGINX Plus API."
#   label: insert Label
#   type: boolean
#   group: "Insert Group Title"

# # `controller.nginxStatus.port` | Set the port where the NGINX stub_status or the NGINX Plus API is exposed. | 8080
# - variable: controller.nginxStatus.port
#   default: 8080
#   description: "Set the port where the NGINX stub_status or the NGINX Plus API is exposed."
#   label: insert Label
#   type: int
#   group: "Insert Group Title"

# # `controller.nginxStatus.allowCidrs` | Whitelist IPv4 IP/CIDR blocks to allow access to NGINX stub_status or the NGINX Plus API. Separate multiple IP/CIDR by commas. | 127.0.0.1
# - variable: controller.nginxStatus.allowCidrs
#   default: 127.0.0.1
#   description: "Whitelist IPv4 IP/CIDR blocks to allow access to NGINX stub_status or the NGINX Plus API. Separate multiple IP/CIDR by commas."
#   label: insert Label
#   type: int
#   group: "Insert Group Title"

# # `controller.priorityClassName` | The PriorityClass of the Ingress controller pods. | None
# - variable: controller.priorityClassName
#   default: None
#   description: "The PriorityClass of the Ingress controller pods."
#   label: insert Label
#   type: Insert one of the following - string multiline boolean int enum password storageclass hostname pvc secret
#   group: "Insert Group Title"

# # `controller.service.create` | Creates a service to expose the Ingress controller pods. | true
# - variable: controller.service.create
#   default: true
#   description: "Creates a service to expose the Ingress controller pods."
#   label: insert Label
#   type: boolean
#   group: "Insert Group Title"

# # `controller.service.type` | The type of service to create for the Ingress controller. | LoadBalancer
# - variable: controller.service.type
#   default: LoadBalancer
#   description: "The type of service to create for the Ingress controller."
#   label: insert Label
#   type: string
#   group: "Insert Group Title"

# # `controller.service.externalTrafficPolicy` | The externalTrafficPolicy of the service. The value Local preserves the client source IP. | Local
# - variable: controller.service.externalTrafficPolicy
#   default: Local
#   description: "The externalTrafficPolicy of the service. The value Local preserves the client source IP."
#   label: insert Label
#   type: string
#   group: "Insert Group Title"

# # `controller.service.annotations` | The annotations of the Ingress controller service. | {}
# - variable: controller.service.annotations
#   default: {}
#   description: "The annotations of the Ingress controller service."
#   label: insert Label
#   type: Insert one of the following - string multiline boolean int enum password storageclass hostname pvc secret
#   group: "Insert Group Title"

# # `controller.service.loadBalancerIP` | The static IP address for the load balancer. Requires `controller.service.type` set to `LoadBalancer`. The cloud provider must support this feature. | ""
# - variable: controller.service.loadBalancerIP
#   default: ""
#   description: "The static IP address for the load balancer. Requires `controller.service.type` set to `LoadBalancer`. The cloud provider must support this feature."
#   label: insert Label
#   type: string
#   group: "Insert Group Title"

# # `controller.service.externalIPs` | The list of external IPs for the Ingress controller service. | []
# - variable: controller.service.externalIPs
#   default: []
#   description: "The list of external IPs for the Ingress controller service."
#   label: insert Label
#   type: Insert one of the following - string multiline boolean int enum password storageclass hostname pvc secret
#   group: "Insert Group Title"

# # `controller.service.loadBalancerSourceRanges` | The IP ranges (CIDR) that are allowed to access the load balancer. Requires `controller.service.type` set to `LoadBalancer`. The cloud provider must support this feature. | []
# - variable: controller.service.loadBalancerSourceRanges
#   default: []
#   description: "The IP ranges (CIDR) that are allowed to access the load balancer. Requires `controller.service.type` set to `LoadBalancer`. The cloud provider must support this feature."
#   label: insert Label
#   type: Insert one of the following - string multiline boolean int enum password storageclass hostname pvc secret
#   group: "Insert Group Title"

# # `controller.service.name` | The name of the service. | Autogenerated
# - variable: controller.service.name
#   default: Autogenerated
#   description: "The name of the service."
#   label: insert Label
#   type: string
#   group: "Insert Group Title"

# # `controller.service.customPorts` | A list of custom ports to expose through the Ingress controller service. Follows the conventional Kubernetes yaml syntax for service ports. | []
# - variable: controller.service.customPorts
#   default: []
#   description: "A list of custom ports to expose through the Ingress controller service. Follows the conventional Kubernetes yaml syntax for service ports."
#   label: insert Label
#   type: Insert one of the following - string multiline boolean int enum password storageclass hostname pvc secret
#   group: "Insert Group Title"

# # `controller.service.httpPort.enable` | Enables the HTTP port for the Ingress controller service. | true
# - variable: controller.service.httpPort.enable
#   default: true
#   description: "Enables the HTTP port for the Ingress controller service."
#   label: insert Label
#   type: boolean
#   group: "Insert Group Title"

# # `controller.service.httpPort.port` | The HTTP port of the Ingress controller service. | 80
# - variable: controller.service.httpPort.port
#   default: 80
#   description: "The HTTP port of the Ingress controller service"
#   label: insert Label
#   type: int
#   group: "Insert Group Title"

# # `controller.service.httpPort.nodePort` | The custom NodePort for the HTTP port. Requires `controller.service.type` set to `NodePort`. | ""
# - variable: controller.service.httpPort.nodePort
#   default: ""
#   description: "The custom NodePort for the HTTP port. Requires `controller.service.type` set to `NodePort`."
#   label: insert Label
#   type: string
#   group: "Insert Group Title"

# # `controller.service.httpPort.targetPort` | The target port of the HTTP port of the Ingress controller service. | 80
# - variable: controller.service.httpPort.targetPort
#   default: 80
#   description: "The target port of the HTTP port of the Ingress controller service."
#   label: insert Label
#   type: int
#   group: "Insert Group Title"

# # `controller.service.httpsPort.enable` | Enables the HTTPS port for the Ingress controller service. | true
# - variable: controller.service.httpsPort.enable
#   default: true
#   description: "Enables the HTTPS port for the Ingress controller service."
#   label: insert Label
#   type: boolean
#   group: "Insert Group Title"

# # `controller.service.httpsPort.port` | The HTTPS port of the Ingress controller service. | 443
# - variable: controller.service.httpsPort.port
#   default: 443
#   description: "The HTTPS port of the Ingress controller service."
#   label: insert Label
#   type: int
#   group: "Insert Group Title"

# # `controller.service.httpsPort.nodePort` | The custom NodePort for the HTTPS port. Requires `controller.service.type` set to `NodePort`.  | ""
# - variable: controller.service.httpsPort.nodePort
#   default: ""
#   description: "The custom NodePort for the HTTPS port. Requires `controller.service.type` set to `NodePort`."
#   label: insert Label
#   type: string
#   group: "Insert Group Title"

# # `controller.service.httpsPort.targetPort` | The target port of the HTTPS port of the Ingress controller service. | 443
# - variable: controller.service.httpsPort.targetPort
#   default: 443
#   description: "The target port of the HTTPS port of the Ingress controller service."
#   label: insert Label
#   type: int
#   group: "Insert Group Title"

# # `controller.serviceAccount.name` | The name of the service account of the Ingress controller pods. Used for RBAC. | Autogenerated
# - variable: controller.serviceAccount.name
#   default: Autogenerated
#   description: "The name of the service account of the Ingress controller pods. Used for RBAC."
#   label: insert Label
#   type: Insert one of the following - string multiline boolean int enum password storageclass hostname pvc secret
#   group: "Insert Group Title"

# # `controller.serviceAccount.imagePullSecrets` | The names of the secrets containing docker registry credentials. | []
# - variable: controller.serviceAccount.imagePullSecrets
#   default: []
#   description: "The names of the secrets containing docker registry credentials."
#   label: insert Label
#   type: Insert one of the following - string multiline boolean int enum password storageclass hostname pvc secret
#   group: "Insert Group Title"

# # `controller.reportIngressStatus.enable` | Update the address field in the status of Ingresses resources with an external address of the Ingress controller. You must also specify the source of the external address either through an external service via `controller.reportIngressStatus.externalService` or the `external-status-address` entry in the ConfigMap via `controller.config.entries`. **Note:** `controller.config.entries.external-status-address` takes precedence if both are set. | true
# - variable: controller.reportIngressStatus.enable
#   default: true
#   description: "Update the address field in the status of Ingresses resources with an external address of the Ingress controller. You must also specify the source of the external address either through an external service via `controller.reportIngressStatus.externalService` or the `external-status-address` entry in the ConfigMap via `controller.config.entries`. **Note:** `controller.config.entries.external-status-address` takes precedence if both are set."
#   label: insert Label
#   type: boolean
#   group: "Insert Group Title"

# # `controller.reportIngressStatus.externalService` | Specifies the name of the service with the type LoadBalancer through which the Ingress controller is exposed externally. The external address of the service is used when reporting the status of Ingress resources. `controller.reportIngressStatus.enable` must be set to `true`. The default is autogenerated and enabled when `controller.service.create` is set to `true` and `controller.service.type` is set to `LoadBalancer`. | Autogenerated
# - variable: controller.reportIngressStatus.externalService
#   default: Autogenerated
#   description: "Specifies the name of the service with the type LoadBalancer through which the Ingress controller is exposed externally. The external address of the service is used when reporting the status of Ingress resources. `controller.reportIngressStatus.enable` must be set to `true`. The default is autogenerated and enabled when `controller.service.create` is set to `true` and `controller.service.type` is set to `LoadBalancer`."
#   label: insert Label
#   type: Insert one of the following - string multiline boolean int enum password storageclass hostname pvc secret
#   group: "Insert Group Title"

# # `controller.reportIngressStatus.enableLeaderElection` | Enable Leader election to avoid multiple replicas of the controller reporting the status of Ingress resources. `controller.reportIngressStatus.enable` must be set to `true`. | true
# - variable: controller.reportIngressStatus.enableLeaderElection
#   default: true
#   description: "Enable Leader election to avoid multiple replicas of the controller reporting the status of Ingress resources. `controller.reportIngressStatus.enable` must be set to `true`."
#   label: insert Label
#   type: boolean
#   group: "Insert Group Title"

# # `controller.reportIngressStatus.leaderElectionLockName` | Specifies the name of the ConfigMap, within the same namespace as the controller, used as the lock for leader election. controller.reportIngressStatus.enableLeaderElection must be set to true. | Autogenerated
# - variable: controller.reportIngressStatus.leaderElectionLockName
#   default: Autogenerated
#   description: "Specifies the name of the ConfigMap, within the same namespace as the controller, used as the lock for leader election. controller.reportIngressStatus.enableLeaderElection must be set to true."
#   label: insert Label
#   type: Insert one of the following - string multiline boolean int enum password storageclass hostname pvc secret
#   group: "Insert Group Title"

# # `controller.pod.annotations` | The annotations of the Ingress Controller pod. | {}
# - variable: controller.pod.annotations
#   default: {}
#   description: "The annotations of the Ingress Controller pod."
#   label: insert Label
#   type: Insert one of the following - string multiline boolean int enum password storageclass hostname pvc secret
#   group: "Insert Group Title"

# # `rbac.create` | Configures RBAC. | true
# - variable: rbac.create
#   default: true
#   description: "Configures RBAC."
#   label: insert Label
#   type: boolean
#   group: "Insert Group Title"

# # `prometheus.create` | Expose NGINX or NGINX Plus metrics in the Prometheus format. | false
# - variable: prometheus.create
#   default: false
#   description: "Expose NGINX or NGINX Plus metrics in the Prometheus format"
#   label: insert Label
#   type: boolean
#   group: "Insert Group Title"

# # `prometheus.port` | Configures the port to scrape the metrics. | 9113
# - variable: prometheus.port
#   default: 9113
#   description: "Configures the port to scrape the metrics."
#   label: insert Label
#   type: int
#   group: "Insert Group Title"


# ----------------
# *** Template ***
# ----------------

# - variable: insert.variable.name
#   default: insert default value
#   description: "Insert description for variable here"
#   label: insert Label
#   type: Insert one of the following - string multiline boolean int enum password storageclass hostname pvc secret
#   show_subquestion_if: false
#   group: "Insert Group Title"
#   subquestions:
#   - variable: variable.name # This is a variable name as defined in your chart
#     default: "Insert default value for variable here"
#     description: "Insert a description here"
#     type: string # insert type here string, boolean
#     label: UI Label # insert UI lable here